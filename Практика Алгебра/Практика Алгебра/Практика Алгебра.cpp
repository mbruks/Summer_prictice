// Практика Алгебра.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cstdlib>
#include <complex>
#include <cmath>                                          
using namespace std;
const double PI = 2 * acos(0.0);
double func1(double x, double X)
{
	if (x > 0 && X != 0)
		return atan(X / x);
	else if (x < 0 && X < 0)
		return -PI + atan(X / x);
	else if (x < 0 && X>0)
		return PI + atan(X / x);
	else if (x == 0 && X > 0)
		return PI / 2;
	else if (x == 0 && X < 0)
		return -PI / 2;
	else if (x > 0 && X == 0)
		return 0;
	else if (x < 0 && X == 0)
		return PI;
}
int main()
{
	int k = 0;
	setlocale(LC_ALL, "Rus");
	//Действительная и мнимая часть:
	long double x, y, X, Y, z, Z;

	complex<long double> A(x, X), B(y, Y);
	//Модуль и аргумент:
	long double r, phi, R, Phi, fi, rho, Fi, mR, w, m;
	//Показатель степени:
	int n;
	while (true)
	{
		int choice;
		cout << " Чтобы вычислить сумму комплексных чисел, нажмите 1 " << endl;
		cout << " Чтобы вычислить произведение комплексных чисел, нажмите 2 " << endl;
		cout << " Чтобы вычислить разность комплексных чисел, нажмите 3 " << endl;
		cout << " Чтобы вычислить частное комплексных чисел, нажмите 4 " << endl;
		cout << " Чтобы привести комплексное число из алгебраической формы в тригонометрическую и экспонициальную, нажмите 5 " << endl;
		cout << " Чтобы привести комплексное число из экспонициальной формы в алгебраическую и тригонометрическую, нажмите 6 " << endl;
		cout << " Чтобы привести комплексное число из тригонометрической формы в алгебраическую и экспонициальную, нажмите 7 " << endl;
		cout << " Чтобы возвести комплексное число в целую степень, нажмите 8 " << endl;
		cout << " Чтобы найти все возможжные корни заданного комплексного числа, нажмите 9 " << endl;
		cout << " Чтобы закрыть приложение, нажмите 10 " << endl;

		cin >> choice;

		switch (choice)
		{
		case 1:
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;
			cout << "Действительная часть комплексного числа y = ";
			cin >> y;
			cout << "Мнимая часть комплексного числа Y = ";
			cin >> Y;

			//Сложение двух комплексных чисел в алгебраической форме:
			cout << "Сложение двух комплексных чисел в алгебраической форме : " << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = x + y;
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = X + Y;
			cout << Z <<"i"<< endl;
			break;

		case 2:
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;
			cout << "Действительная часть комплексного числа y = ";
			cin >> y;
			cout << "Мнимая часть комплексного числа Y = ";
			cin >> Y;

			//Умножение двух комплексных чисел в алгебраической форме:
			cout << "Умножение двух комплексных чисел в алгебраической форме : " << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = x * y - X * Y;
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = x * Y + y * X;
			cout << Z << "i" << endl;
			break;
		case 3:
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;
			cout << "Действительная часть комплексного числа y = ";
			cin >> y;
			cout << "Мнимая часть комплексного числа Y = ";
			cin >> Y;

			//Разность двух комплексных чисел в алгебраической форме:
			cout << "Разность двух комплексных чисел в алгебраической форме: " << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = x - y;
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = X - Y;
			cout << Z << "i" << endl;
			break;
		case 4:
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;
			cout << "Действительная часть комплексного числа y = ";
			cin >> y;
			cout << "Мнимая часть комплексного числа Y = ";
			cin >> Y;

			// Частное двух комплексных чисел в алгебраической форме:
			cout << "Частное двух комплексных чисел в алгебраической форме: " << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = (x * y + X * Y) / (y * y + Y * Y);
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = (y * X - x * Y) / (y * y + Y * Y);
			cout << Z << "i" << endl;
			break;
		case 5:
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;

			//Приведение комплексного числа из алгебраической формы в тригонометрическую и экспоненциальную:
			cout << "Приведение комплексного числа из алгебраической формы в тригонометрическую:" << endl;
			fi = (atan2(X, x)*180)/PI;
			r = (int)(sqrt(x * x + X * X) * 100) / 100.;
			fi = (int)(fi * 100) / 100.;
			cout << r << "*(cos(" << fi << ")+i*sin(" << fi << "))" << endl;
			cout << "Приведение комплексного числа из алгебраической формы в экспоненциальную:" << endl;
			rho = abs(r);
			cout << rho << "e^(i*" << fi << ")" << endl;
			break;
		case 6:
			cout << "Введите аргумент fi= ";
			cin >> Fi;
			cout << "Введите модуль r= ";
			cin >> mR;

			//Приведение комплексного числа из экспоненциальной формы в алгебраическую и тригонометрическую:
			cout << "Приведение комплексного числа из экспоненциальной формы в алгебраическую:" << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = mR * cos((Fi*PI)/180);
			z = (int)(z * 100) / 100.;
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = mR * sin((Fi * PI) / 180);
			Z = (int)(Z * 100) / 100.;
			cout << Z << endl;
			cout << "Приведение комплексного числа из экспоненциальной формы в тригонометрическую:" << endl;
			z = mR * cos(Fi);
			Z = mR * sin(Fi);

			cout << mR << "*(cos(" << Fi << ")+i*sin(" << Fi << "))" << endl;
			break;
		case 7:
			cout << "Введите аргумент fi= ";
			cin >> Fi;
			cout << "Введите модуль r= ";
			cin >> mR;

			// Приведение комплексного числа из тригонометрической формы в алгебраическую и экспоненциальную:
			cout << "Приведение комплексного числа из тригонометрической формы в алгебраическую :" << endl;
			cout << "Действительная часть комплексного числа z = " << endl;
			z = mR * cos((Fi*PI)/180);
			z = (int)(z * 100) / 100.;
			cout << z << endl;
			cout << "Мнимая часть комплексного числа Z = " << endl;
			Z = mR * sin((Fi * PI) / 180);
			Z = (int)(Z * 100) / 100.;
			cout << Z << endl;
			cout << "Приведение комплексного числа из тригонометрической формы в экспоненциальную:" << endl;
			cout << mR << "e^(i*" << Fi << ")" << endl;
			break;
		case 8:
			//Возведение комплексного числа в алгебраической форме в заданную целую степень:
			cout << "Степень n = ";
			cin >> n;
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;

			phi = atan2(X, x);
			r = sqrt(x * x + X * X);
			R = pow(r, n);
			Phi = n * phi;
			z = R * cos(Phi);
			Z = R * sin(Phi);
			z = (int)(z * 100) / 100.;
			Z = (int)(Z * 100) / 100.;
			cout << "Возведение комплексного числа в алгебраической форме в заданную целую степень" << endl;
			cout << "Действительная часть z=" << z << endl;
			cout << "Мнимая часть Z=" << Z << "i" << endl;
			break;
		case 9:
			//Нахождение для комплексного числа в алгебраической форме всех корней заданной целой степени. Вывод корней в алгебраической форме
			cout << "Степень n = ";
			cin >> n;
			cout << "Действительная часть комплексного числа x = ";
			cin >> x;
			cout << "Мнимая часть комплексного числа X = ";
			cin >> X;

			r = sqrt(x * x + X * X);
			rho = abs(r);
			fi = func1(x, X);
			cout << "Нахождение для комплексного числа в алгебраической форме всех корней заданной целой степени:" << endl;
			while (k != n)

			{

				z = pow(rho, 1 / n) * (cos((fi + 2 * PI * k) / n));
				Z = pow(rho, 1 / n) * (sin((fi + 2 * PI * k) / n));
				k++;
				z = (int)(z * 100) / 100.;
				Z = (int)(Z * 100) / 100.;
				cout << "При k=" << k << endl;
				cout << "Действительная часть комплексного числа z = " << endl;
				cout << z << endl;
				cout << "Мнимая часть комплексного числа Z = " << endl;
				cout << Z << "i" << endl;

			}
			break;
		case 10:
			return 0;

		}
	}
	system("pause");
}


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
